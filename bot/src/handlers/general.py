from aiogram.dispatcher.filters import Text
from aiogram import types
from aiogram.dispatcher import FSMContext
# from aiogram.contrib.fsm_storage.memory import MemoryStorage

from ..misc import dp, bot

from ..modules import database
from ..modules import user as us
from ..modules import functions as fn
from ..modules import navigation as nav

from ..modules.messages import general as messages
from ..modules.states.states_bt import *

from pyqrcode import create


db = database.DataBase('database/database.db')
user = us.User()
functions = fn.Functions()
navigation = nav.Navigation()


async def on_startup(_):
    print('[+] Have been started!')


key_words = ['2021', '–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ', '—Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ',
             '–ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä', '–º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä',
             '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å', '—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å', '1961',
             '–†–æ—Å–∫–æ—Å–º–æ—Å', '—Ä–æ—Å–∫–æ—Å–º–æ—Å']

words_from_main_handler = ['–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '–º–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                           '–ì–æ—Å—Ç—å',
                           '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –±–∞–ª–ª—ã?',
                           '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
                           '–ü—Ä–æ—Ñ–∏–ª—å', '–ø—Ä–æ—Ñ–∏–ª—å', '–º–µ–Ω—é', '–ù–∞–∑–∞–¥',
                           '–ú–µ–Ω—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π',
                           '–û—Ç–º–µ—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
                           '–°–ø–∏—Å–æ–∫ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤',
                           '–†–µ–π—Ç–∏–Ω–≥ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤',
                           '–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π']


async def alert_about_deleting_meeting(rus_name_of_meeting):
    base_of_users = db.list_of_all_users()
    for user_id in base_of_users:
        text = f'–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ \"{rus_name_of_meeting}\" —É–¥–∞–ª–µ–Ω–æ!'
        await bot.send_message(user_id[0], text=text)


async def check_user_log(message):
    user_id = message.from_user.id
    if db.logged_verification(user_id) == 'logged':
        return 0
    else:
        markup = navigation.start_menu()
        await message.answer(text='–¢–µ–±–µ –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤—Ç—å—Å—è!', reply_markup=markup)
        return 0


async def check_user_role(message):
    user_id = message.from_user.id
    if db.get_user_role(user_id) != 'guest':
        return 0
    else:
        markup = navigation.start_menu()
        await message.answer(text='–¢–µ–±–µ –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤—Ç—å—Å—è!', reply_markup=markup)
        return 0


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    text_greeting = f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}!'
    user_id = message.from_user.id
    if db.logged_verification(user_id):
        markup = user.get_markup(user_id)
        await message.answer(text=text_greeting)
        await message.answer(text="–¢—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –Ω–∞—à–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üòâ")
        await message.answer(text=" Telegram - https://t.me/volonterstankin \n VK - https://vk.com/volonterstankin",
                             reply_markup=markup)
        await message.delete()

    else:
        markup = navigation.start_menu()
        ID = db.count_of_users() + 1
        login = 'login' + str(ID)
        db.add_user(login, 'Guest', 1234, user_id, ID)
        await message.answer(text=text_greeting, reply_markup=markup)
        await message.delete()


@dp.message_handler(Text('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'), state=None)
async def choose_the_role(message: types.Message):
    markup = navigation.two_button_menu('–î–∞', '–ù–µ—Ç', 1)

    await message.answer(text='–¢—ã —Ö–æ—á–µ—à—å —Å—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º?', reply_markup=markup)
    await message.delete()

    await Registration.next()


@dp.message_handler(state=Registration.confirmation)
async def ask_for_login(message: types.Message, state: FSMContext):
    if message.text == '–î–∞':
        markup = navigation.button_list()
        await message.answer(text='''–í–≤–µ–¥–∏ —Å–≤–æ–π –ª–æ–≥–∏–Ω: \n–í —Ñ–æ—Ä–º–∞—Ç–µ vc(–Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ) \n–ü—Ä–∏–º–µ—Ä: vc123456''',
                             reply_markup=markup)

        await Registration.next()
    elif message.text == '–ù–µ—Ç':
        markup = navigation.guest_menu()
        await message.answer(text='–ü—Ä–µ–¥–ª–∞–≥–∞—é –ø–æ—Å–µ—Ç–∏—Ç—å –≥–æ—Å—Ç–µ–≤—É—é –≤–∫–ª–∞–¥–∫—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ –±–æ—Ç–∞!',
                             reply_markup=markup)
        await state.finish()
    elif message.text == '–ù–∞–∑–∞–¥':
        markup = navigation.start_menu()
        await message.answer(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup)
        await state.finish()
    else:
        markup = navigation.start_menu()
        await message.answer(text='–û–π.. –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!', reply_markup=markup)
        await state.finish()


@dp.message_handler(state=Registration.login)
async def get_login_from_user(message: types.Message, state: FSMContext):
    login = message.text

    if message.text == '–ù–∞–∑–∞–¥':
        markup = navigation.start_menu()
        await message.answer(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup)
        await state.finish()
    elif not (db.user_exists(login)):
        login.lower()
        if len(login) == 8 and login[:2] == 'vc':
            if functions.check_login_password(login):
                markup = navigation.button_list()
                await state.update_data(login=login)
                await message.answer(text='''–í–≤–µ–¥–∏ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å: 
                                    \n‚ÅÉ–ò—Å–ø–æ–ª—å–∑—É–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã –±–µ–∑ —Å–∏–≤–æ–ª–æ–≤: / –∏ @
                                    \n‚ÅÉ–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–Ω–æ–π –Ω–µ –±–æ–ª—å—à–µ 20 —Å–∏–º–≤–æ–ª–æ–≤''', reply_markup=markup)

                await Registration.next()
            else:
                markup = navigation.start_menu()
                await message.answer(text='–û–π.. –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!', reply_markup=markup)
                await state.finish()
        else:
            markup = navigation.start_menu()
            await message.answer(text='–õ–æ–≥–∏–Ω –≤–≤–µ–¥–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!', reply_markup=markup)
            await state.finish()
    else:
        await message.answer(text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        await Registration.previous()


@dp.message_handler(state=Registration.password)
async def get_password_from_user(message: types.Message, state: FSMContext):
    password = message.text
    if message.text == '–ù–∞–∑–∞–¥':
        markup = navigation.start_menu()
        await message.answer(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup)
        await state.finish()
    elif functions.check_login_password(password):
        markup = navigation.button_list()
        await state.update_data(password=password)
        await message.answer(text='''–£–∫–∞–∂–∏ —Å–≤–æ–µ –∏–º—è –∏ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤''', reply_markup=markup)
        await Registration.next()
    else:
        markup = navigation.start_menu()
        await message.answer(text='–û–π.. –ü–∞—Ä–æ–ª—å –≤–≤–µ–¥–µ–Ω –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!', reply_markup=markup)
        await Registration.previous()


@dp.message_handler(state=Registration.name_surname_group)
async def get_personal_data(message: types.Message, state: FSMContext):
    answer = message.text.split()
    if answer[0] == '–ù–∞–∑–∞–¥':
        markup = navigation.start_menu()
        await message.answer(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup)
        await state.finish()
    elif len(answer) != 1:
        name_and_surname = answer[:2]
        name = name_and_surname[0]
        await state.update_data(name=name)
        surname = name_and_surname[1]
        await state.update_data(surname=surname)
        text = f"""–¢—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª –¥–∞–Ω–Ω—ã–µ? \n{name} {surname}"""
        markup = navigation.two_button_menu('–î–∞', '–ù–µ—Ç', 1)
        await message.answer(text=text, reply_markup=markup)
        await Registration.next()
    else:
        markup = navigation.start_menu()
        await message.answer(text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!', reply_markup=markup)
        await state.finish()


@dp.message_handler(state=Registration.confirm_personal_data)
async def get_personal_data(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == '–î–∞':
        data = await state.get_data()
        markup = navigation.one_button_menu('–í–æ–π—Ç–∏')
        try:
            user_id = message.from_user.id
            login = data.get('login')
            role = 'Volunteer'
            password = data.get('password')
            name = data.get('name')
            surname = data.get('surname')
            student_id = login[2:]

            functions.add_user_to_database(user_id, name, surname, student_id, login, password, role)

            await message.answer(text='–¢—ã –º–æ–∂–µ—à—å –≤–æ–π—Ç–∏!', reply_markup=markup)
            await message.delete()
            await state.finish()
        except Exception as error:
            print(error)
            markup = navigation.start_menu()
            await message.answer(text='–û–π.. –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!', reply_markup=markup)
            await state.finish()
    elif answer == '–ù–µ—Ç':
        await message.answer(text='''–£–∫–∞–∂–∏ —Å–≤–æ–µ –∏–º—è –∏ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤''')
        await Registration.name_surname_group.set()
    else:
        await Registration.previous()


@dp.message_handler(Text('–í–æ–π—Ç–∏'), state=None)
async def enter_login(message: types.Message):
    await message.answer(text='–í–≤–µ–¥–∏ —Å–≤–æ–π –ª–æ–≥–∏–Ω:')
    await LogInProcess.login.set()


@dp.message_handler(state=LogInProcess.login)
async def enter_password(message: types.Message, state: FSMContext):
    login = message.text
    await state.update_data(login=login)

    await message.answer(text='–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å:')
    await LogInProcess.next()


@dp.message_handler(state=LogInProcess.password)
async def checking_user(message: types.Message, state: FSMContext):
    data = await state.get_data()
    login = data.get('login')
    password = message.text
    user_id = message.from_user.id

    if db.user_verification(login, password):
        markup = user.get_markup(message.from_user.id)

        db.set_logged(user_id)
        await message.answer(text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ—Ñ–∏–ª—å!', reply_markup=markup)
    else:
        markup = navigation.start_menu()
        await message.answer(text='–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –≤–æ–π—Ç–∏! :(', reply_markup=markup)

    await state.finish()


@dp.message_handler(Text('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–º—è'), state=None)
async def get_new_user_name(message: types.Message):
    markup = navigation.one_button_menu('–ù–∞–∑–∞–¥')
    await message.answer(text='–í–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è:', reply_markup=markup)
    await ChangeUserName.new_user_name.set()


@dp.message_handler(state=ChangeUserName.new_user_name)
async def get_new_user_name(message: types.Message, state: FSMContext):
    markup = navigation.settings_menu()
    if message.text == '–ù–∞–∑–∞–¥':
        await message.answer(text='–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫', reply_markup=markup)
        await state.finish()
    else:
        name = message.text.split()[0]
        id_user = message.from_user.id
        db.set_users_name(id_user, name)
        await message.answer(text='–ò–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!', reply_markup=markup)
        await state.finish()


@dp.message_handler(Text('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é'), state=None)
async def get_new_user_surname(message: types.Message):
    markup = navigation.one_button_menu('–ù–∞–∑–∞–¥')
    await message.answer(text='–í–≤–µ–¥–∏ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é:', reply_markup=markup)
    await ChangeUserSurname.new_user_surname.set()


@dp.message_handler(state=ChangeUserSurname.new_user_surname)
async def get_new_user_surname(message: types.Message, state: FSMContext):
    markup = navigation.settings_menu()
    if message.text == '–ù–∞–∑–∞–¥':
        await message.answer(text='–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫', reply_markup=markup)
        await state.finish()
    else:
        surname = message.text.split()[0]
        id_user = message.from_user.id
        db.set_users_surname(id_user, surname)
        await message.answer(text='–§–∞–º–∏–ª–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!', reply_markup=markup)
        await state.finish()


@dp.message_handler(Text('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ'), state=None)
async def get_new_user_surname(message: types.Message):
    markup = navigation.one_button_menu('–ù–∞–∑–∞–¥')
    await message.answer(text='–í–≤–µ–¥–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ:', reply_markup=markup)
    await ChangeUserGroup.new_user_group.set()


@dp.message_handler(state=ChangeUserGroup.new_user_group)
async def get_new_user_surname(message: types.Message, state: FSMContext):
    markup = navigation.settings_menu()
    student_id = message.text
    if message.text == '–ù–∞–∑–∞–¥':
        await message.answer(text='–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫', reply_markup=markup)
        await state.finish()
    elif len(student_id) == 6:
        student_id = message.text
        id_user = message.from_user.id
        db.set_users_student_id(id_user, student_id)
        await message.answer(text='–ù–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!', reply_markup=markup)
        await state.finish()
    else:
        await message.answer(text='–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞!', reply_markup=markup)
        await state.finish()


@dp.message_handler(Text('–£–π—Ç–∏ —Ä–∞–Ω—å—à–µ'), state=None)
async def get_meeting_name(message: types.Message):
    markup = navigation.button_list()
    list_of_meetings = functions.show_volunteers_meetings_lists(message.from_user.id, "started_meetings")

    await message.answer(text=list_of_meetings)
    await message.answer(text="–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å —Å–µ–π—á–∞—Å —É–π—Ç–∏:",
                         reply_markup=markup)
    await LeaveMeeting.meeting_name.set()


@dp.message_handler(state=LeaveMeeting.meeting_name)
async def try_to_join_meeting(message: types.Message, state: FSMContext):
    if message.text == '–ù–∞–∑–∞–¥':
        markup = user.get_markup(message.from_user.id)
        await message.answer(text='–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å', reply_markup=markup)
        await state.finish()
    elif message.text.isdigit():
        number_of_meeting = int(message.text)
        user_id = str(message.from_user.id)
        meeting_name = functions.dict_elements.get(user_id).get(number_of_meeting)
        try:
            db.leave_early(meeting_name, message.from_user.id)
            functions.dict_elements.pop(user_id)
            markup = user.get_markup(message.from_user.id)
            await message.answer(text='–ù–µ –∑–∞–±—É–¥—å –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É, —á—Ç–æ —Ç—ã —É—à–µ–ª —Ä–∞–Ω—å—à–µ!', reply_markup=markup)
            await state.finish()
        except NameError as error:
            print(error)
            functions.dict_elements.pop(user_id)
    else:
        markup = user.get_markup(message.from_user.id)
        await message.answer(text='–û–π... –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!', reply_markup=markup)
        await state.finish()


@dp.message_handler(Text('–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ'), state=None)
async def get_meeting_name(message: types.Message):
    markup = navigation.button_list()
    list_of_meetings = functions.show_volunteers_meetings_lists(message.from_user.id, "choosing_meeting")
    meetings_to_join = list_of_meetings[0]
    meetings_joined = list_of_meetings[1]

    await message.answer(text=meetings_to_join)
    await message.answer(text=meetings_joined)
    await message.answer(text="–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è",
                         reply_markup=markup)
    await JoinMeeting.meeting_name.set()


@dp.message_handler(state=JoinMeeting.meeting_name)
async def try_to_join_meeting(message: types.Message, state: FSMContext):
    if message.text == '–ù–∞–∑–∞–¥':
        markup = user.get_markup(message.from_user.id)
        await message.answer(text='–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å', reply_markup=markup)
        await state.finish()
    elif message.text.isdigit():
        user_id = str(message.from_user.id)
        number_of_meeting = int(message.text)
        meeting_name = functions.dict_elements.get(user_id).get(number_of_meeting)
        functions.dict_elements.pop(user_id)

        if not (db.get_user_meeting_exist(meeting_name, user_id)):
            try:
                db.join_meeting(meeting_name, message.from_user.id)

                markup = user.get_markup(message.from_user.id)
                await message.answer(text='–¢—ã —É—á–∞—Å—Ç–≤—É–µ—à—å!', reply_markup=markup)
                await state.finish()
            except NameError as error:
                print(error)
        else:
            markup = user.get_markup(message.from_user.id)
            await message.answer(text='–¢—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —ç—Ç–æ–º—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é!', reply_markup=markup)
            await state.finish()
    else:
        markup = user.get_markup(message.from_user.id)
        await message.answer(text='–í–≤–µ–¥–∏ —á–∏—Å–ª–æ!', reply_markup=markup)
        await state.finish()


@dp.message_handler(Text('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ'), state=None)
async def try_join_meeting(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if user.get_user_role(user_id) == "Volunteer":
        markup = navigation.button_list()
        text = functions.show_volunteers_meetings_lists(user_id, "confirm_attend")
        await message.answer(text=text, reply_markup=markup)
        await message.answer(text="–í–≤–µ–¥–∏ —á–∏—Å–ª–æ:",
                             reply_markup=markup)

        await ConfirmMeeting.name_of_meeting.set()
    else:
        markup = user.get_markup(message.from_user.id)
        await message.answer(text='–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!', reply_markup=markup)
        await state.finish()


@dp.message_handler(state=ConfirmMeeting.name_of_meeting)
async def check_access_key(message: types.Message, state: FSMContext):
    if message.text == '–ù–∞–∑–∞–¥':
        markup = user.get_markup(message.from_user.id)
        await message.answer(text='–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å', reply_markup=markup)
        await state.finish()
    elif message.text.isdigit():
        user_id = str(message.from_user.id)
        number_of_meeting = int(message.text)
        if number_of_meeting in functions.dict_elements[user_id].keys():
            name_of_meeting = functions.dict_elements.get(user_id).get(number_of_meeting)
            functions.dict_elements.pop(user_id)
            if db.check_meeting_status(name_of_meeting) == 'started':
                await state.update_data(meeting_name=name_of_meeting)

                markup = navigation.one_button_menu('–ù–∞–∑–∞–¥')
                await message.answer(text='–í–≤–µ–¥–∏ –∫–ª—é—á-–¥–æ—Å—Ç—É–ø–∞ –∏–∑ qr-–∫–æ–¥–∞:', reply_markup=markup)
                await ConfirmMeeting.access_key.set()
            else:
                markup = user.get_markup(message.from_user.id)
                await message.answer(text='–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å!', reply_markup=markup)
                await state.finish()
        else:
            markup = user.get_markup(message.from_user.id)
            await message.answer(text='–¢–∞–∫–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ!', reply_markup=markup)
            await state.finish()
    else:
        markup = user.get_markup(message.from_user.id)
        await message.answer(text='–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!', reply_markup=markup)
        await state.finish()


@dp.message_handler(state=ConfirmMeeting.access_key)
async def join_meeting(message: types.Message, state: FSMContext):
    if message.text == '–ù–∞–∑–∞–¥':
        markup = user.get_markup(message.from_user.id)
        await message.answer(text='–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å', reply_markup=markup)
        await state.finish()
    else:
        access_key = message.text
        data = await state.get_data()
        meeting_name = data.get('meeting_name')

        if db.check_access_key(meeting_name, access_key):
            markup = navigation.get_location()
            await message.answer(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é, –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è',
                                 reply_markup=markup)
            await ConfirmMeeting.location.set()
        else:
            markup = user.get_markup(message.from_user.id)
            await message.answer(text='–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ')
            await message.answer(text='–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!', reply_markup=markup)
            await state.finish()


@dp.message_handler(state=ConfirmMeeting.location, content_types=['location'])
async def confirm_join(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == '–ù–∞–∑–∞–¥':
        markup = user.get_markup(message.from_user.id)
        await message.answer('–ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ—Ä–≤–∞–Ω', reply_markup=markup)
        await state.finish()
    else:
        latitude = message.location.latitude
        longitude = message.location.longitude
        data = await state.get_data()
        meeting_name = data.get('meeting_name')
        markup = user.get_markup(message.from_user.id)

        meeting_location = db.get_meeting_location(meeting_name)
        distance = functions.get_distance_between_users(meeting_location, (latitude, longitude))

        maximum_distance = db.get_meeting_distance(meeting_name)

        if distance < maximum_distance:
            points = db.get_points(message.from_user.id)
            hours = db.get_hours_of_meeting(meeting_name)
            points += hours
            db.mark_as_joined(meeting_name, message.from_user.id, points, latitude, longitude)
            await message.answer(text='–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –≤—Ä–µ–º—è –ø—Ä–∏–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è :)', reply_markup=markup)
            await state.finish()
        else:
            await message.answer(text='–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ ;(', reply_markup=markup)
            await state.finish()


@dp.message_handler(Text('–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ'), state=None)
async def try_create_meeting(message: types.Message):
    user_id = message.from_user.id
    if user.get_user_role(user_id):
        markup = navigation.two_button_menu('–î–∞', '–ù–µ—Ç', 1)
        await message.answer(text='–¢—ã —É–≤–µ—Ä–µ–Ω?', reply_markup=markup)
        await CreateMeeting.next()
    else:
        markup = user.get_markup(message.from_user.id)
        await message.answer(text='–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!', reply_markup=markup)


@dp.message_handler(state=CreateMeeting.confirmation)
async def enter_meeting_name(message: types.Message, state: FSMContext):
    if message.text == '–ù–∞–∑–∞–¥':
        markup = user.get_markup(message.from_user.id)
        await message.answer('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ', reply_markup=markup)
        await state.finish()
    elif message.text == '–î–∞':
        markup = navigation.button_list()
        await message.answer(text='–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', reply_markup=markup)
        await CreateMeeting.next()

    else:
        markup = user.get_markup(message.from_user.id)
        await message.answer(text='–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ', reply_markup=markup)
        await state.finish()


@dp.message_handler(state=CreateMeeting.name_of_meeting)
async def enter_hours_meeting(message: types.Message, state: FSMContext):
    if message.text == '–ù–∞–∑–∞–¥':
        markup = user.get_markup(message.from_user.id)
        await message.answer('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ', reply_markup=markup)
        await state.finish()
    name_rus = message.text
    name = functions.transform_meeting_name(name_rus)
    await state.update_data(name_of_meeting=name)
    await state.update_data(rus_name_of_meeting=name_rus)

    await message.answer(text='–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤:')
    await CreateMeeting.next()


@dp.message_handler(state=CreateMeeting.duration_of_meeting)
async def enter_date_meeting(message: types.Message, state: FSMContext):
    if message.text == '–ù–∞–∑–∞–¥':
        markup = user.get_markup(message.from_user.id)
        await message.answer('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ', reply_markup=markup)
        await state.finish()
    elif message.text.isdigit():
        hours = int(message.text)
        await state.update_data(hours=hours)
        await message.answer(text='''–í–≤–µ–¥–∏ –¥–∞—Ç—É: \n–í —Ñ–æ—Ä–º–∞—Ç–µ –î–ï–ù–¨.–ú–ï–°–Ø–¶.–ì–û–î \n(XX.XX.XXXX)''')
        await CreateMeeting.next()
    else:
        await message.answer(text='–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ —á–∞—Å–æ–≤!')
        await CreateMeeting.previous()


@dp.message_handler(state=CreateMeeting.date_of_meeting)
async def create_meeting(message: types.Message, state: FSMContext):
    date = message.text
    if len(date.split('.')) == 3 and len(date) == 10:
        data = await state.get_data()
        date = message.text
        name_of_meeting = data.get('name_of_meeting')
        rus_name_of_meeting = data.get('rus_name_of_meeting')
        hours = data.get('hours')

        try:
            db.create_meeting(name_of_meeting, date, 'planned', rus_name_of_meeting, hours)
            markup = user.get_markup(message.from_user.id)
            await message.answer(text='–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ', reply_markup=markup)
        except Exception:
            markup = user.get_markup(message.from_user.id)
            await message.answer(text='–û–π.. –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!', reply_markup=markup)
        finally:
            await state.finish()

    else:
        await message.answer(text='–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞—Ç—ã!')
        await message.answer(text='''–í–≤–µ–¥–∏ –¥–∞—Ç—É: \n–í —Ñ–æ—Ä–º–∞—Ç–µ –î–ï–ù–¨.–ú–ï–°–Ø–¶.–ì–û–î \n(XX.XX.XXXX)''')


@dp.message_handler(Text('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–º–µ—Ç–∫–∞'), state=None)
async def get_location_of_employee(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    if user.get_user_role(user_id):
        markup = navigation.button_list()
        text = functions.show_volunteers_meetings_lists(user_id, "meetings_for_confirmation")

        await message.answer(text=text, reply_markup=markup)
        await message.answer(text="–í–≤–µ–¥–∏ —á–∏—Å–ª–æ:",
                             reply_markup=markup)
        await AutoMarks.name_of_meeting.set()
    else:
        markup = user.get_markup(message.from_user.id)
        await message.answer(text='–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!', reply_markup=markup)
        await state.finish()


@dp.message_handler(state=AutoMarks.name_of_meeting)
async def get_location_of_employee(message: types.Message, state: FSMContext):
    if message.text == '–ù–∞–∑–∞–¥':
        markup = user.get_markup(message.from_user.id)
        await message.answer(text='–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å', reply_markup=markup)
        await state.finish()
    else:
        if message.text.isdigit():
            number_of_meeting = int(message.text)
            user_id = str(message.from_user.id)
            if number_of_meeting in functions.dict_elements.get(user_id).keys():
                meeting_name = functions.dict_elements.get(user_id).get(number_of_meeting)
                functions.dict_elements.pop(user_id)
                await state.update_data(meeting_name=meeting_name)
                markup = navigation.choice_menu()
                await message.answer(text='–¢—ã —Å–º–æ–∂–µ—à—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏?', reply_markup=markup)
                await AutoMarks.next()
            else:
                markup = user.get_markup(message.from_user.id)
                await message.answer(text='–¢–∞–∫–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ!', reply_markup=markup)
                await state.finish()
        else:
            markup = user.get_markup(message.from_user.id)
            await message.answer(text='–í–≤–µ–¥–∏ —á–∏—Å–ª–æ!', reply_markup=markup)
            await state.finish()


@dp.message_handler(state=AutoMarks.set_mode)
async def get_location_of_employee(message: types.Message, state: FSMContext):
    answer = message.text
    mode = 0
    if message.text == '–ù–∞–∑–∞–¥':
        markup = user.get_markup(message.from_user.id)
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup)
        await state.finish()
    elif answer == '–î–∞':
        mode = 1
        markup = navigation.get_location()
        await message.answer(text='–£–∫–∞–∂–∏ –º–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏ –∏ –Ω–∞–ø–∏—à–∏ "–ì–æ—Ç–æ–≤–æ"', reply_markup=markup)
        await AutoMarks.set_location.set()
    elif answer == '–ù–µ—Ç':
        mode = 2
        await message.answer(text='''–í–≤–µ–¥–∏ –∞–¥—Ä–µ—Å—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: \n*–í–æ–∑—å–º–∏ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å —Å –∫–∞—Ä—Ç* \n–ù–∞–ø—Ä–∏–º–µ—Ä –∏–∑ 2–ì–ò–°''')
        await AutoMarks.set_location2.set()
    else:
        markup = user.get_markup(message.from_user.id)
        await message.answer(text='–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!', reply_markup=markup)
        await state.finish()
    await state.update_data(mode=mode)


@dp.message_handler(state=AutoMarks.set_location, content_types=['location', 'text'])
async def creating_qr(message: types.Message, state: FSMContext):
    try:
        longitude = message.location.longitude
        latitude = message.location.latitude
        access_key = functions.generate_access_key()

        await state.update_data(longitude=longitude)
        await state.update_data(latitude=latitude)
        await state.update_data(access_key=access_key)

        await AutoMarks.finish_state.set()
    except Exception as error:
        print(error)
        answer = message.text
        if answer == '–ù–∞–∑–∞–¥':
            markup = navigation.choice_menu()
            await message.answer(text='–¢—ã —Å–º–æ–∂–µ—à—å –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏?', reply_markup=markup)
            await AutoMarks.set_mode.set()
        else:
            markup = user.get_markup(message.from_user.id)
            await message.answer(text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!', reply_markup=markup)
            await state.finish()


@dp.message_handler(state=AutoMarks.set_location2)
async def set_location_mode2(message: types.Message, state: FSMContext):
    address = message.text
    data = functions.coordinates_form_address(address)

    longitude = data.get('longitude')
    latitude = data.get('latitude')
    access_key = functions.generate_access_key()

    full_address = data.get('address')

    await state.update_data(longitude=longitude)
    await state.update_data(latitude=latitude)
    await state.update_data(access_key=access_key)

    text = f"""–¢—ã –≤–≤–µ–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å—Å?
            \n{full_address}"""
    markup = navigation.choice_menu()
    await message.answer(text=text, reply_markup=markup)

    await AutoMarks.set_location2_confirm.set()


@dp.message_handler(state=AutoMarks.set_location2_confirm)
async def confirm_location2(message: types.Message):
    answer = message.text
    if answer == '–î–∞':
        markup = navigation.one_button_menu('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')
        await message.answer(text='–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –≤—Å–µ –≥–æ—Ç–æ–≤–æ...', reply_markup=markup)
        await AutoMarks.finish_state.set()
    elif answer == '–ù–µ—Ç':
        await message.answer(text='–í–≤–µ–¥–∏ –∞–¥—Ä–µ—Å—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:')
        await AutoMarks.previous()
    else:
        markup = navigation.choice_menu()
        await message.answer(text='–¢—ã —Å–º–æ–∂–µ—à—å –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏?', reply_markup=markup)
        await AutoMarks.set_mode.set()


@dp.message_handler(state=AutoMarks.finish_state)
async def creating_qr(message: types.Message, state: FSMContext):
    data = await state.get_data()
    latitude = data.get('latitude')
    longitude = data.get('longitude')

    meeting_name = data.get('meeting_name')

    access_key = data.get('access_key')

    mode = data.get('mode')
    status = 'started'

    if mode == 1:
        await message.answer('–¢–≤–æ–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–Ω—è—Ç –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É! \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏')
        qr_code = create(access_key)
        distance = 100
        qr_code.png('qr_code.png', scale=6)

        with open('qr_code.png', 'rb') as code:
            await bot.send_photo(message.chat.id, code)

        db.set_data_before_creating_qr(meeting_name, latitude, longitude, access_key, distance, status)
        markup = user.get_markup(message.from_user.id)
        await message.answer(text='–¢–≤–æ–π QR-–∫–æ–¥ –≥–æ—Ç–æ–≤', reply_markup=markup)

    if mode == 2:
        distance = 400
        db.set_data_before_creating_qr(meeting_name, latitude, longitude, access_key, distance, status)
        markup = user.get_markup(message.from_user.id)
        await bot.send_location(message.from_user.id, latitude=latitude, longitude=longitude)
        text = f'''–¢–µ–ø–µ—Ä—å –∫ –º–µ—Ä–æ–ø—Ä–∏—Ç–∏—é –º–æ–∂–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è! \n–í–æ—Ç –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞: {access_key}'''
        await message.answer(text=text, reply_markup=markup)

    await state.finish()


@dp.message_handler(Text('–ù–∞–∑–Ω–∞—á–∏—Ç—å/—Ä–∞–∑–∂–∞–ª–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞'), state=None)
async def add_to_list_of_employers(message: types.Message):
    user_id = str(message.from_user.id)
    role = user.get_user_role(user_id)
    if role == "Employee":
        list_of_users = functions.get_list_of_all_users(user_id)
        markup = navigation.button_list()

        await message.answer(text=list_of_users, reply_markup=markup)
        await message.answer(text="–í–≤–µ–¥–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏ –Ω–æ–º–µ—Ä —á–µ–ª–æ–≤–µ–∫–∞ –≤ —Å–ø–∏—Å–∫–µ:\n–ü—Ä–∏–º–µ—Ä:\n\"–†–∞–∑–∂–∞–ª–æ–≤–∞—Ç—å 1\"\n\"–ù–∞–∑–Ω–∞—á–∏—Ç—å 2\"",
                             reply_markup=markup)
        await AddEmployee.next()
    else:
        markup = user.get_markup(message.from_user.id)
        await message.answer(text='–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞', reply_markup=markup)


@dp.message_handler(state=AddEmployee.choose_user)
async def choose_user(message: types.Message, state: FSMContext):
    message_data = message.text.split()
    command = message_data[0]
    number_of_user = message_data[1]
    if number_of_user.isdigit():
        number_of_user = int(number_of_user)
        user_id_main = str(message.from_user.id)
        if number_of_user in functions.dict_elements.get(user_id_main).keys():
            user_id = functions.dict_elements.get(user_id_main).get(number_of_user)
            functions.dict_elements.pop(user_id_main)
            await state.update_data(user_id=user_id)
            data = db.get_user_name_surname_points(user_id)
            name, surname = data[0], data[1]
            user_role = db.get_user_role(user_id)
            if command == "–ù–∞–∑–Ω–∞—á–∏—Ç—å":
                if user_role == "Volunteer":
                    await state.update_data(MODE=1)
                    text = f"–¢—ã —Ö–æ—á–µ—à—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å {name} {surname} —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–º?"
                    markup = navigation.two_button_menu('–î–∞', '–ù–µ—Ç', 1)
                    await message.answer(text=text, reply_markup=markup)
                    await AddEmployee.next()
                else:
                    markup = user.get_markup(message.from_user.id)
                    await message.answer(text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–º!", reply_markup=markup)
                    await state.finish()
            elif command == "–†–∞–∑–∂–∞–ª–æ–≤–∞—Ç—å":
                if user_role == "Employee":
                    await state.update_data(MODE=2)
                    text = f"–¢—ã —Ö–æ—á–µ—à—å —Ä–∞–∑–∂–∞–ª–æ–≤–∞—Ç—å {name} {surname}?"
                    markup = navigation.two_button_menu('–î–∞', '–ù–µ—Ç', 1)
                    await message.answer(text=text, reply_markup=markup)
                    await AddEmployee.next()
                else:
                    markup = user.get_markup(message.from_user.id)
                    await message.answer(text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º!", reply_markup=markup)
                    await state.finish()
        else:
            markup = user.get_markup(message.from_user.id)
            await message.answer(text="–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ!", reply_markup=markup)
            await state.finish()

    else:
        markup = user.get_markup(message.from_user.id)
        await message.answer(text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=markup)
        await state.finish()


@dp.message_handler(state=AddEmployee.confirmation)
async def confirmation(message: types.Message, state: FSMContext):
    answer = message.text
    markup = user.get_markup(message.from_user.id)
    data = await state.get_data()
    user_id = data.get('user_id')
    mode = data.get('MODE')
    if answer == '–î–∞':
        if mode == 1:
            db.set_role('Employee', user_id)
            await message.answer(text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–Ω–∏–∫!', reply_markup=markup)
            await state.finish()
        elif mode == 2:
            db.set_role('Volunteer', user_id)
            await message.answer(text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å –≤–æ–ª–æ–Ω—Ç–µ—Ä!', reply_markup=markup)
            await state.finish()
    else:
        if mode == 1:
            await message.answer(text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–ª—Å—è –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º!', reply_markup=markup)
            await state.finish()
        elif mode == 2:
            await message.answer(text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–ª—Å—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–º!', reply_markup=markup)
            await state.finish()


@dp.message_handler(Text('–ú–µ–Ω—é –æ—Ç–º–µ—Ç–æ–∫'), state=None)
async def try_to_confirm_join(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if user.get_user_role(user_id):
        markup = navigation.two_button_menu('–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ', '–£—à–ª–∏ —Ä–∞–Ω—å—à–µ/–û–ø–æ–∑–¥–∞–ª–∏', 1)
        await message.answer(text="–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)
        await ConfirmAttend.next()

    else:
        markup = navigation.volunteer_profile_menu()
        await message.answer(text='–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!', reply_markup=markup)
        await state.finish()


@dp.message_handler(state=ConfirmAttend.choose_type_of_mark)
async def get_username_for_confirm_attend(message: types.Message, state: FSMContext):
    type_of_menu = message.text
    await state.update_data(type_of_menu=type_of_menu)
    user_id = message.from_user.id
    if message.text == '–ù–∞–∑–∞–¥':
        markup = navigation.employee_profile_menu()
        await message.answer(text='–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å', reply_markup=markup)
        await state.finish()
    elif message.text == '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ' or message.text == '–£—à–ª–∏ —Ä–∞–Ω—å—à–µ/–û–ø–æ–∑–¥–∞–ª–∏':
        markup = navigation.button_list()

        text = functions.show_volunteers_meetings_lists(user_id, "meetings_for_confirmation")

        await message.answer(text=text, reply_markup=markup)
        await message.answer(text="–í–≤–µ–¥–∏ —á–∏—Å–ª–æ:",
                             reply_markup=markup)
        await ConfirmAttend.next()
    else:
        answer = '–û–π... –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!'
        markup = user.get_markup(message.from_user.id)
        await message.answer(text=answer, reply_markup=markup)


@dp.message_handler(state=ConfirmAttend.name_of_meeting)
async def get_username_for_confirm_attend(message: types.Message, state: FSMContext):
    if message.text == '–ù–∞–∑–∞–¥':
        markup = navigation.employee_profile_menu()
        await message.answer(text='–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å', reply_markup=markup)
        await state.finish()
    elif message.text.isdigit():
        number_of_meeting = int(message.text)
        user_id = str(message.from_user.id)
        if number_of_meeting in functions.dict_elements.get(user_id).keys():
            name_of_meeting = functions.dict_elements.get(user_id).get(number_of_meeting)
            functions.dict_elements.pop(user_id)
            await state.update_data(name_of_meeting=name_of_meeting)

            markup = navigation.button_list()
            data = await state.get_data()
            type_of_menu = data.get('type_of_menu')
            if type_of_menu == '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ':
                list_of_not_joined_users = functions.show_users_list_meeting(name_of_meeting, 'waiting', user_id)
                text = list_of_not_joined_users
                await message.answer(text=text)
                await message.answer(text="–í–≤–µ–¥–∏ —á–∏—Å–ª–æ:", reply_markup=markup)
                await ConfirmAttend.next()
            elif type_of_menu == '–£—à–ª–∏ —Ä–∞–Ω—å—à–µ':
                list_of_leaved_early_users = functions.show_users_list_meeting(name_of_meeting, 'early', user_id)
                text = list_of_leaved_early_users
                await message.answer(text=text)
                await message.answer(text="–í–≤–µ–¥–∏ —á–∏—Å–ª–æ:", reply_markup=markup)
                await ConfirmAttend.next()
        else:
            markup = navigation.employee_profile_menu()
            await message.answer(text='–¢–∞–∫–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ!', reply_markup=markup)
            await state.finish()
    else:
        markup = navigation.employee_profile_menu()
        await message.answer(text='–û–π... –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!', reply_markup=markup)
        await state.finish()


@dp.message_handler(state=ConfirmAttend.entering_hours)
async def entering_hours(message: types.Message, state: FSMContext):
    if message.text == '–ù–∞–∑–∞–¥':
        markup = navigation.employee_profile_menu()
        await message.answer(text='–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å', reply_markup=markup)
        await state.finish()
    elif message.text.isdigit():
        user_id_main = str(message.from_user.id)
        if int(message.text) in functions.dict_elements.get(user_id_main).keys():
            number_of_user = int(message.text)
            user_id = str(functions.dict_elements.get(user_id_main).get(number_of_user))
            functions.dict_elements.pop(user_id_main)
            await state.update_data(user_id=user_id)
            data = await state.get_data()
            name_of_meeting = data.get('name_of_meeting')
            mark = db.get_user_mark(name_of_meeting, user_id)
            if mark == 'early':
                await message.answer(text="–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤:")
                await ConfirmAttend.next()
            elif mark == 'waiting':
                markup = navigation.one_button_menu('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')
                await message.answer(text="–ï—Å–ª–∏ –≥–æ—Ç–æ–≤, –Ω–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", reply_markup=markup)
                await ConfirmAttend.next()
        else:
            markup = navigation.employee_profile_menu()
            await message.answer(text='–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ –Ω–µ—Ç!', reply_markup=markup)
            await state.finish()
    else:
        markup = navigation.employee_profile_menu()
        await message.answer(text='–û–π... –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!', reply_markup=markup)
        await state.finish()


@dp.message_handler(state=ConfirmAttend.name_of_user)
async def confirm_attend(message: types.Message, state: FSMContext):
    if message.text == '–ù–∞–∑–∞–¥':
        markup = navigation.employee_profile_menu()
        await message.answer(text='–ü—Ä–æ—Ñ–∏–ª—å', reply_markup=markup)
        await state.finish()

    elif message.text == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' or message.text.isdigit():
        data = await state.get_data()
        name_of_meeting = data.get('name_of_meeting')
        user_id = data.get('user_id')
        mark = db.get_user_mark(name_of_meeting, user_id)
        hours = db.get_hours_of_meeting(name_of_meeting)
        if mark == 'early':
            early_leaved_hours = int(message.text)
            if hours > early_leaved_hours:
                points = int(db.get_points(user_id)) + early_leaved_hours

                db.mark_as_joined_not_auto(name_of_meeting, user_id, points)
                markup = user.get_markup(message.from_user.id)
                await message.answer(text='–£—á–∞—Å—Ç–Ω–∏–∫ –æ—Ç–º–µ—á–µ–Ω!',
                                     reply_markup=markup)
                await state.finish()
            else:
                markup = user.get_markup(message.from_user.id)
                await message.answer(text='–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –æ—Ç–º–µ—á–µ–Ω, –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª–∏–ª–æ—Å—å –º–µ–Ω—å—à–µ!',
                                     reply_markup=markup)
                await state.finish()

        elif mark == 'waiting':
            points = int(db.get_points(user_id)) + hours

            db.mark_as_joined_not_auto(name_of_meeting, user_id, points)
            markup = user.get_markup(message.from_user.id)
            await message.answer(text='–£—á–∞—Å—Ç–Ω–∏–∫ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π!', reply_markup=markup)
            await state.finish()
        else:
            markup = user.get_markup(message.from_user.id)
            await message.answer(text='–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π!', reply_markup=markup)
            await state.finish()


@dp.message_handler(Text('–£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ'), state=None)
async def confirm_deleting(message: types.Message):
    user_id = message.from_user.id
    role = user.get_user_role(user_id)
    if role == 'Employee':
        markup = navigation.two_button_menu('–î–∞', '–ù–µ—Ç', 1)
        await message.answer(text='–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?', reply_markup=markup)
        await DeletingMeeting.confirm.set()
    else:
        markup = user.get_markup(message.from_user.id)
        await message.answer(text='–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ —É–¥–∞–ª–µ–Ω–æ!', reply_markup=markup)


@dp.message_handler(state=DeletingMeeting.confirm)
async def enter_name_of_meeting(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    if message.text == '–î–∞':
        markup = navigation.button_list()
        list_of_meetings = functions.show_volunteers_meetings_lists(user_id, "meetings_for_confirmation")
        await message.answer(text=list_of_meetings, reply_markup=markup)
        await message.answer(text="–í–≤–µ–¥–∏ —á–∏—Å–ª–æ:",
                             reply_markup=markup)
        await DeletingMeeting.next()
    else:
        markup = user.get_markup(message.from_user.id)
        await message.answer(text='–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ —É–¥–∞–ª–µ–Ω–æ!', reply_markup=markup)
        await state.finish()


@dp.message_handler(state=DeletingMeeting.name_of_meeting)
async def enter_name_of_meeting(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        number_of_meeting = int(message.text)
        user_id = str(message.from_user.id)
        if number_of_meeting in functions.dict_elements.get(user_id).keys():
            name_of_meeting = functions.dict_elements.get(user_id).get(number_of_meeting)
            functions.dict_elements.pop(user_id)
            markup = user.get_markup(message.from_user.id)

            # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ excel
            excel_file = functions.convert_data_to_excel(name_of_meeting)

            with open(excel_file, 'rb') as file:
                await bot.send_document(message.chat.id, file)

            list_of_members = db.get_list_of_all_meeting_participants(name_of_meeting)
            count_of_members = len(list_of_members)
            hours = db.get_hours_of_meeting(name_of_meeting)

            text1 = f"""–í–æ—Ç excel-—Ñ–∞–π–ª —Å–æ –≤—Å–µ–π –Ω—É–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π :) """
            text2 = f"""\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {count_of_members}"""
            text3 = f""" \n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤: {hours}"""
            text = text1 + text2 + text3
            await message.answer(text=text, reply_markup=markup)

            name_rus = db.get_rus_meeting_name(name_of_meeting)
            await alert_about_deleting_meeting(name_rus)
            db.delete_meeting(name_of_meeting)

            await state.finish()
        else:
            markup = user.get_markup(message.from_user.id)
            await message.answer(text='–¢–∞–∫–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ!', reply_markup=markup)
            await state.finish()
    else:
        markup = user.get_markup(message.from_user.id)
        await message.answer(text='–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ —É–¥–∞–ª–µ–Ω–æ!', reply_markup=markup)
        await state.finish()


@dp.message_handler(Text(words_from_main_handler))
async def main_handler(message: types.Message):
    text_of_message = message.text
    user_id = message.from_user.id

    if db.logged_verification(user_id) == 'logged':
        if db.get_user_role(user_id) == "guest":
            markup = navigation.start_menu()
            await message.answer(text='–¢–µ–±–µ –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤—Ç—å—Å—è!', reply_markup=markup)
        else:
            if text_of_message in ['–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '–º–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']:
                markup = user.get_markup(message.from_user.id)
                text = functions.generate_ratings(user_id, 'volunteer')
                await message.answer(text=text, reply_markup=markup)

            elif text_of_message == '–ì–æ—Å—Ç—å':
                markup = navigation.guest_menu()
                alert = messages.message_for_guest
                await message.answer(text=alert, reply_markup=markup)
                await message.delete()

            elif text_of_message == '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –±–∞–ª–ª—ã?':
                user_id = message.from_user.id
                markup = user.get_markup(user_id)
                text = messages.information_about_points
                await message.answer(text=text, parse_mode='HTML', reply_markup=markup)

            elif text_of_message == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏':
                markup = navigation.settings_menu()
                await message.answer(text='–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫', reply_markup=markup)

            elif text_of_message in ['–ü—Ä–æ—Ñ–∏–ª—å', '–ø—Ä–æ—Ñ–∏–ª—å', '–º–µ–Ω—é', '–ù–∞–∑–∞–¥']:
                user_id = message.from_user.id
                markup = user.get_markup(user_id)
                await message.answer(text='–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å', reply_markup=markup)

            elif text_of_message == '–ú–µ–Ω—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π':
                user_id = message.from_user.id
                markup = user.open_additional_menu(user_id, 'meetings')
                await message.answer(text='–ú–µ–Ω—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π', reply_markup=markup)

            elif text_of_message == '–û—Ç–º–µ—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤':
                user_id = message.from_user.id
                if user.get_user_role(user_id) == "Employee":
                    markup = user.open_additional_menu(user_id, 'volunteer')
                    await message.answer(text='–û—Ç–º–µ—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', reply_markup=markup)
                else:
                    markup = user.get_markup(user_id)
                    await message.answer(text='–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!', reply_markup=markup)

            elif text_of_message == '–°–ø–∏—Å–æ–∫ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤':
                user_id = message.from_user.id
                role = user.get_user_role(user_id)
                if role == "Employee":
                    list_of_volunteers = functions.show_volunteers_list()
                    markup = user.get_markup(message.from_user.id)
                    await message.answer(text=list_of_volunteers, reply_markup=markup)
                else:
                    markup = user.get_markup(message.from_user.id)
                    await message.answer(text="–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", reply_markup=markup)

            elif text_of_message == '–†–µ–π—Ç–∏–Ω–≥ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤':
                user_id = message.from_user.id
                role = user.get_user_role(user_id)
                if role == "Employee":
                    volunteers_rating = functions.generate_ratings(user_id, role)
                    markup = user.get_markup(message.from_user.id)
                    await message.answer(text=volunteers_rating, reply_markup=markup)
                else:
                    markup = user.get_markup(message.from_user.id)
                    await message.answer(text="–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", reply_markup=markup)

            elif text_of_message == '–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π':
                user_id = str(message.from_user.id)
                employee = user.get_user_role(user_id)
                if employee:
                    list_of_meetings = functions.show_volunteers_meetings_lists(user_id, "show_notFinished_meetings")
                    answer = list_of_meetings
                    markup = user.get_markup(message.from_user.id)
                    await message.answer(text=answer, reply_markup=markup)
                elif not employee:
                    list_of_meetings = functions.show_volunteers_meetings_lists(user_id, "available_meetings")
                    answer1 = list_of_meetings[0]
                    answer2 = list_of_meetings[1]
                    markup = user.get_markup(message.from_user.id)
                    await message.answer(text=answer1, reply_markup=markup)
                    await message.answer(text=answer2, reply_markup=markup)
                else:
                    answer = '–û–π... –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!'
                    markup = user.get_markup(message.from_user.id)
                    await message.answer(text=answer, reply_markup=markup)
    else:
        markup = navigation.start_menu()
        await message.answer(text='–¢–µ–±–µ –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤—Ç—å—Å—è!', reply_markup=markup)


@dp.message_handler()
async def echo(message: types.Message):
    try:
        markup = user.get_markup(message.from_user.id)
        await message.answer(text='–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ! :)',
                             reply_markup=markup)
    except Exception as error:
        print(error)
        markup = navigation.start_menu()
        await message.answer(text='–¢–µ–±–µ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –Ω–∞–ø–∏—à–∏ \'/start\'',
                             reply_markup=markup)


@dp.message_handler(Text(key_words))
async def get_secret_question(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        role = db.get_user_role(user_id)
        if role == 'guest':
            markup = navigation.start_menu()
            await message.answer(text='–ü—Ä–∏–≤–µ—Ç! :) –ß—Ç–æ–±—ã —É—á–∞–≤—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –æ–ø—Ä–æ—Å–µ, –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!',
                                 reply_markup=markup)
        else:
            questions = {'2021': '–ö–∞–∫ –æ—Ç–º–µ—á–∞–ª–∏ –¥–µ–Ω—å –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∏–∫–∏ –≤ 2021 –≥–æ–¥—É?',
                         '–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ': '–ö–∞–∫–∞—è –∫–æ—Å–º–∏—á–µ—Å–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞–µ—Ç —Å–æ —Å—Ç–∞–Ω–∫–∏–Ω–æ–º?',
                         '–ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä': '–ö—Ç–æ –±—ã–ª –æ—Å–Ω–æ–≤–æ–ø–æ–ª–æ–∂–Ω–∏–∫ —Ç–µ–æ—Ä–∏–∏ –º–µ–∂–ø–ª–∞–Ω–µ—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π? –û–Ω –ø–µ—Ä–≤—ã–º –∏–∑—É—á–∏–ª –≤–æ–ø—Ä–æ—Å –æ —Ä–∞–∫–µ—Ç–µ, –≤—ã—Å–∫–∞–∑–∞–ª –∏–¥–µ—é —Å–æ–∑–¥–∞–Ω–∏—è –æ–∫–æ–ª–æ–∑–µ–º–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π, —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–ª –≤–æ–ø—Ä–æ—Å—ã –æ –º–µ–¥–∏–∫–æ-–±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö, –≤–æ–∑–Ω–∏–∫–∞—é—â–∏—Ö –ø—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ—Ç–∞—Ö',
                         '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å': '–ö–∞–∫–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞–ø—Ä—è–º—É—é —Å–≤—è–∑–∞–Ω—ã —Å –∫–æ—Å–º–æ—Å–æ–º?',
                         '1961': '–í 1961 –≤–º–µ—Å—Ç–µ —Å –≤—ã—Ö–æ–¥–æ–º –ø–µ—Ä–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –≤ –∫–æ—Å–º–æ—Å –≤ –°—Ç–∞–Ω–∫–∏–Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å –Ω–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏. –ö–∞–∫ –æ–Ω–æ –Ω–∞–∑—ã–≤–∞–ª–æ—Å—å?',
                         '–†–æ—Å–∫–æ—Å–º–æ—Å': '31 –º–∞—è –≤ 2022 –≥–æ–¥—É –ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä —Ä–æ—Å–∫–æ—Å–º–æ—Å–∞ –≤—Ä—É—á–∏–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ–ø–æ—Ä–Ω–æ–≥–æ –≤—É–∑–∞ –æ–¥–Ω–æ–º—É –∏–∑ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–∞—à–µ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞. –ö–æ–º—É –±—ã–ª –≤—Ä—É—á–µ–Ω —ç—Ç–æ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç?'}
            buttons = {'2021': ['C—Ç—É–¥–µ–Ω—Ç—ã —É—Å—Ç—Ä–æ–∏–ª–∏ —Ñ–ª–µ—à–º–æ–±, –∑–∞–ø—É—Å—Ç–∏–≤ –¥–µ—Å—è—Ç–∫–∏ —Ü–≤–µ—Ç–Ω—ã—Ö —à–∞—Ä–æ–≤ –∏ –≤—ã—Å—Ç—Ä–æ–∏–≤—à–∏—Å—å –≤ —á–∏—Å–ª–æ ¬´60¬ª',
                                'C—Ç—É–¥–µ–Ω—Ç—ã —Å–º–æ–≥–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–¥–µ–ª—å —Ä–∞–∫–µ—Ç—ã –≤ –Ω–µ–±–æ –Ω–∞ –≤—ã—Å–æ—Ç—É 270 –º–µ—Ç—Ä–æ–≤',
                                'C—Ç—É–¥–µ–Ω—Ç—ã —Å–º–æ—Ç—Ä–µ–ª–∏ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é —Ñ–æ—Ä—É–º–∞ ¬´–ó–Ω–∞–Ω–∏–µ¬ª, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤—ã—Å—Ç—É–ø–∞–ª –ò–ª–æ–Ω –ú–∞—Å–∫',
                                'C—Ç—É–¥–µ–Ω—Ç—ã –ø–æ—Å–µ—Ç–∏–ª–∏ –º—É–∑–µ–π –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∏–∫–∏ –Ω–∞ –≤–¥–Ω—Ö'],
                       '–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ': ['–ù–ü–û ¬´–ê–Ω–¥—Ä–æ–∏–¥–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞¬ª',
                                          '–†–æ—Å–∫–æ—Å–º–æ—Å –∏ –ê–û ¬´–ì–ö–ù–ü–¶ –∏–º. –ú.–í. –•—Ä—É–Ω–∏—á–µ–≤–∞',
                                          '–†–æ—Å—Ç–µ—Ö',
                                          'SpaceX'],
                       '–ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä': ['–Æ—Ä–∏–π –ê–ª–µ–∫—Å–µ–µ–≤–∏—á –ì–∞–≥–∞—Ä–∏–Ω',
                                      '–ò—Å–∞–∞–∫ –ù—å—é—Ç–æ–Ω',
                                      '–°–µ—Ä–≥–µ–π –ü–∞–≤–ª–æ–≤–∏—á –ö–æ—Ä–æ–ª–µ–≤',
                                      '–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –≠–¥—É–∞—Ä–¥–æ–≤–∏—á –¶–∏–æ–ª–∫–æ–≤—Å–∫–∏–π'],
                       '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å': ['–≠–∫–æ–ª–æ–≥–∏—è/–°—Ç–∞–Ω–∫–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ',
                                         '–ú–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ/—Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞/–º–µ—Ç—Ä–æ–ª–æ–≥–∏—è –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è',
                                         '–≠–∫–æ–Ω–æ–º–∏–∫–∞/–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤',
                                         '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –∏ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞'],
                       '1961': ['–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è',
                                '–ú–µ—Ö–∞—Ç—Ä–æ–Ω–∏–∫–∞ –∏ —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞',
                                '–¢–µ—Ö–Ω–æ—Å—Ñ–µ—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
                                '–ú–µ—Ç—Ä–æ–ª–æ–≥–∏—è –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è'],
                       '–†–æ—Å–∫–æ—Å–º–æ—Å': ['–ü—Ä–æ—Ä–µ–∫—Ç–æ—Ä—É –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–º—É —Ä–∞–∑–≤–∏—Ç–∏—é –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º',
                                     '–†–µ–∫—Ç–æ—Ä—É',
                                     '–ü—Ä–æ—Ä–µ–∫—Ç–æ—Ä—É –ø–æ –Ω–∞—É—á–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
                                     '–ü—Ä–æ—Ä–µ–∫—Ç–æ—Ä—É –ø–æ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –º–æ–ª–æ–¥–µ–∂–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–µ']}
            encrypt = {'2021': 'twenty',
                       '–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ': 'sotrudnichestvo',
                       '–ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä': 'messendger',
                       '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å': 'specialnost',
                       '1961': 'sixty',
                       '–†–æ—Å–∫–æ—Å–º–æ—Å': 'roscosmos'}
            key_word = message.text.capitalize()
            question = questions.get(key_word)
            buttons_for_question = buttons.get(key_word)
            encrypt_question = encrypt.get(key_word)
            if question is not None:
                db.add_user_to_quiz(user_id)
                if not (db.get_info_about_question_by_user_id(user_id, encrypt_question)):
                    markup = navigation.four_button_menu(buttons_for_question)

                    await state.update_data(key_word=key_word)
                    await AnswerQuestion.next()
                    await message.answer(text=question, reply_markup=markup)
                else:
                    markup = user.get_markup(user_id)
                    await message.answer(text="–ò–∑–≤–∏–Ω–∏, –Ω–æ —Ç—ã —É–∂–µ –æ—Ç–≤–µ—á–∞–ª –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å!",
                                         reply_markup=markup)
                    await state.finish()
    except Exception:
        markup = navigation.start_menu()
        await message.answer(text='–ü—Ä–∏–≤–µ—Ç! :) –ß—Ç–æ–±—ã —É—á–∞–≤—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –æ–ø—Ä–æ—Å–µ, –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!',
                             reply_markup=markup)


@dp.message_handler(state=AnswerQuestion)
async def get_answer(message: types.Message, state: FSMContext):
    answers = {'2021': 'C—Ç—É–¥–µ–Ω—Ç—ã —É—Å—Ç—Ä–æ–∏–ª–∏ —Ñ–ª–µ—à–º–æ–±, –∑–∞–ø—É—Å—Ç–∏–≤ –¥–µ—Å—è—Ç–∫–∏ —Ü–≤–µ—Ç–Ω—ã—Ö —à–∞—Ä–æ–≤ –∏ –≤—ã—Å—Ç—Ä–æ–∏–≤—à–∏—Å—å –≤ —á–∏—Å–ª–æ ¬´60¬ª',
               '–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ': '–†–æ—Å–∫–æ—Å–º–æ—Å –∏ –ê–û ¬´–ì–ö–ù–ü–¶ –∏–º. –ú.–í. –•—Ä—É–Ω–∏—á–µ–≤–∞',
               '–ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä': '–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –≠–¥—É–∞—Ä–¥–æ–≤–∏—á –¶–∏–æ–ª–∫–æ–≤—Å–∫–∏–π',
               '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å': '–ú–∞—à–∏–Ω–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ/—Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞/–º–µ—Ç—Ä–æ–ª–æ–≥–∏—è –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è',
               '1961': '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è',
               '–†–æ—Å–∫–æ—Å–º–æ—Å': '–†–µ–∫—Ç–æ—Ä—É'}
    encrypt = {'2021': 'twenty',
               '–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ': 'sotrudnichestvo',
               '–ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä': 'messendger',
               '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å': 'specialnost',
               '1961': 'sixty',
               '–†–æ—Å–∫–æ—Å–º–æ—Å': 'roscosmos'}
    data = await state.get_data()
    key_word = data.get('key_word')
    answer = answers.get(key_word)
    user_answer = message.text
    question = encrypt.get(key_word)
    user_id = message.from_user.id

    if user_answer == answer:
        db.set_info_about_question_by_user_id(user_id, question)
        points = db.get_points(user_id) + 1
        db.add_points(user_id, points)
        markup = user.get_markup(user_id)
        await message.answer(text="–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –∑–∞—á–∏—Å–ª–∏–ª–∏ —Ç–µ–±–µ 1 –±–∞–ª–ª!",
                             reply_markup=markup)
        await state.finish()
    else:
        markup = user.get_markup(user_id)
        db.set_info_about_question_by_user_id(user_id, question)
        await message.answer(text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –æ—Ç–≤–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π :(",
                             reply_markup=markup)
        await state.finish()